extends layout

block content
    if error
        #topPanel.topPanel
            .title #{title}
            .panel.panel-danger.errorPanel
                .panel-heading.error
                    | #{error}
                    br
                    button.btn.btn-danger.btnReload(name="reloadButton" onClick="window.location.reload()" type='button') Reload page

    else
        .manageRulesBody#manageRulesBody(ng-controller="ManageRulesController" ng-init='restApiServerAddress="#{restApiServerAddress}"')
            .ruleTitle #{title}
                br
                .subTitle#subTitle You don't like overexcited Spongebob? 
                    u Click
                    |  on that naughty sponge to hide it!
            
            .panel.panel-success.errorPanel(ng-hide="!successPosting")
                .panel-heading.error
                    | Yay you successfully managed a rule!
                    br
                    a.btn.btn-success.btnGoBack(href='/') Go back
                    button.btn.btn-success.btnManageAnother(name="manageAnotherButton" onClick="window.location.reload()" type='button') Manage another one!
            
            #manageRulesContainer.manageRulesContainer(ng-hide="successPosting")
                #addBadgePanel.addBadgePanel(ng-init='apiKey="#{apiKey}"')
                    .addBadgeTitle Add a badge...
                    
                    .input-group
                        span(class="input-group-addon")
                            span(class="glyphicon glyphicon-bookmark")
                        input#badgeName(class="form-control" name="badgeName" ng-model="badgeName" placeholder="Title (e.g. \"Level 5!\")" required="required" type="text")
                        
                    .input-group
                        span(class="input-group-addon")
                            span(class="glyphicon glyphicon-tags")
                        input(class="form-control" name="badgeDescription" ng-model="badgeDescription" placeholder="Short description (e.g. \"Yay you reached level 5!\")" required="required" type="text")
                        
                    hr
                    
                    .badgeLogoTitle Logo
                    p
                        | Priorize a 
                        b
                            u squared
                        |  picture - Maximum size of 
                        b 2 MB.
                        br
                        |  Allowed extensions: 
                        b "gif", "jpeg", "jpg" or "png"
                        | .
                        br
                        | If you do not choose a logo, the default one (a white circle) will be selected.
                    // Angular 'ng-change' is not supporting the input file field :(.
                    input(name='picture' onchange='angular.element(this).scope().uploadFile(this.files)' type='file')
                    
                    hr
                    
                    .panel.panel-danger(ng-if="badgeAddingError")
                        .panel-heading
                            | {{badgeAddingError}}
                    .emptySpace(ng-if="!badgeAddingError")
                    
                    .addBadgeButtons
                        button.btn.btnApp.backButton(name="cancelButton" ng-click='cancelBadgeAdding(true)' onclick="hideBadgeAdding(true);" type='button') Cancel
                        button#btnAddBadge.btn.btnApp.executeButton(name="addBadgeButton" ng-click='addBadge()' type='submit')
                            | Add it!

                form.manageRulesPanel
                    #optionsError.panel.panel-danger.optionsError
                        .panel-heading
                            #optionsErrorContent
                    
                    .input-group.actionType
                        span(class="input-group-addon")
                            span(class="glyphicon glyphicon-pushpin")
                        select.form-control#actionSelect(ng-model="actionSelect" ng-options="o.value as o.name for o in actionsOptions")
                            option(disabled='disabled' selected='selected' style='display: none;' value='') Please select an action...
                                       
                    .actionOptions
                        .selectRuleOption#selectRuleOption
                            .input-group(ng-init='rules=#{JSON.stringify(rules)}')
                                span(class="input-group-addon")
                                    span(class="glyphicon glyphicon-tag")
                                // Displays each rule by the format : "[{Add/Delete} {points/badge}] {ruleName}".
                                select.form-control#ruleSelect(ng-change="loadSelectedRule()" ng-model="ruleSelect" ng-options='("[" + (rule.penalty == false ? "Adding" : "Removing") + " " + (rule.rewardType == 1 ? "points" : "badge") + " rule] " + rule.typeOfEvent) for rule in rules | orderBy: "typeOfEvent"')
                                    option(disabled='disabled' selected='selected' style='display: none;' value='') Which rule do you want to {{actionSelect}}?
            
                        .addRuleOption#addRuleOption
                            .input-group
                                span(class="input-group-addon")
                                    span(class="glyphicon glyphicon-tag")
                                input#ruleName(class="form-control" type="text" ng-model="ruleName" placeholder="Your rule's name")
                                
                            .input-group
                                span(class="input-group-addon")
                                    span(class="glyphicon glyphicon-tower")
                                select.form-control#ruleTypeSelect(ng-disabled="ruleTypeDisabled" ng-model="ruleType" ng-options="o.value as o.name for o in ruleTypesOptions")
                                    option(disabled='disabled' selected='selected' style='display: none;' value='') What kind of rule do you want to create?
                                    
                            .input-group.rulePoints#rulePoints
                                span(class="input-group-addon")
                                    span(class="glyphicon glyphicon-education")
                                input#numberOfPoints(class="form-control" ng-model="numberOfPoints" placeholder="How many points will the user gain or lose?" type="number")
                                
                            .input-group.ruleBadge#ruleBadge
                                span(class="input-group-addon")
                                    span(class="glyphicon glyphicon-gift")
                                select.form-control#badgeKindSelect(ng-model="badgeKindSelect" ng-options="o.value as o.name for o in badgeKindOptions")
                                    option(disabled='disabled' selected='selected' style='display: none;' value='') Okay, what kind of badge?
                            
                            .input-group#newBadgeValue
                                span(class="input-group-addon")
                                    span(class="glyphicon glyphicon-gift")
                                input.form-control(disabled="disabled" ng-model="newBadgeValue" type="text")
                            
                            .input-group.ruleBadge#existingBadge(ng-init='badges=#{JSON.stringify(badges)}')
                                span(class="input-group-addon")
                                    span(class="glyphicon glyphicon-gift")
                                select.form-control#badgeSelect(ng-model="badgeSelect" ng-options="o.name for o in badges | orderBy: 'name'")
                                    option(disabled='disabled' selected='selected' style='display: none;' value='') Please select the badge...
                            
                            .badgePreviewPanel#badgePreviewPanel
                                .previewTitle#previewTitle Live Preview
                                .badgePreview
                                    span(ng-if="badgeName") {{badgeName}}
                                    span(ng-if="!badgeName") [New Badge]
                                    br
                                    img.badgeImg(ng-if="badgeImageUrl" ng-src="/img/badges/{{badgeImageUrl}}")
                                    img.badgeImg(ng-if="!badgeImageUrl" ng-src="/img/badges/default.png")
                                    br
                                    div.badgeText(ng-if="badgeDescription") {{badgeDescription}}
                                    div.badgeText(ng-if="!badgeDescription") [Description]
                                    
                            .input-group.penalty#penalty
                                input.penaltyChk(type="checkbox" ng-model="penalty" name="penalty")
                                .penaltyLabel This is a penalty (remove given 
                                    span {{dataType}}
                                    | )
                            
                        .deleteRuleOption#deleteRuleOption
                            
                            
                    .panel.panel-danger(ng-if="error")
                        .panel-heading
                            | {{error}}
                            
                    .rulesButtons#rulesButtons
                        a.btn.btnApp.backButton(href='/') Back
                        button#btnExecute.btn.btnApp.executeButton(name="sendButton" ng-click="executeAction()" ng-disabled="btnExecuteDisabled" ng-model="btnExecute" type='submit')
                            | Execute! 
                            span(class="glyphicon glyphicon-send")
            
            img#spongebobImg.spongebobImg(src='/img/spongebob.png')

        script.
            var isBadgeAddingPanelOpen = false;
            var isBobThrown = false;
            var bobHasBeenThrown = false;
            var spongebobJumping;
        
            // hide subtitle.
            function hideSubtitle() {
                $("#subTitle").fadeOut("slow");
            }
            
            // Bob is overexcited and can't stop jumping...
            // Occurs when the user successfully managed a rule or when he wants
            // to throw Bob out of the screen...
            function overexcitedBob() {
                if (!bobHasBeenThrown) {
                    spongebobJumping = setInterval(function() {
                        if ($("#spongebobImg").is(".spongebobImgJump")) {
                            $("#spongebobImg").removeClass("spongebobImgJump");
                        }
                        else {
                            $("#spongebobImg").addClass("spongebobImgJump");
                        }
                    }, 200);
                }
            }
        
            // Throw Spongebob out of the screen...
            function throwBob() {
                var secondsRemaining = 6;
                
                isBobThrown = true;
                
                $("#spongebobImg").css("transition", "bottom 150ms");
                $("#subTitle").text("Bob you have " + secondsRemaining + " seconds to get out!");
                
                overexcitedBob();
                
                var timer = setInterval(function() {
                    if (secondsRemaining > 0) {
                        $("#subTitle").text("Bob you have " + --secondsRemaining + 
                                                " " + (secondsRemaining > 1 ? "seconds" : "second") + " to get out!");
                    }
                    else {
                        $("#spongebobImg").css("transition", "all 1500ms");
                        
                        $("#subTitle").fadeOut("slow");
                        $("#spongebobImg").removeClass("spongebobImgJump");
                        $("#spongebobImg").removeClass("spongebobImgMoved");                    
                        $("#spongebobImg").addClass("spongeBobThrown");
                        bobHasBeenThrown = true;
                        
                        clearInterval(timer);
                        clearInterval(spongebobJumping);
                    }
                }, 1000);
            }
        
            // Shows badge adding panel if it is not already shown.
            function showBadgeAdding() {
                if (!isBadgeAddingPanelOpen) {                
                    setTimeout(function() {
                        $("#addBadgePanel").css("visibility", "visible");
                        $("#addBadgePanel").addClass("addBadgePanelShows");
                        $("#badgeName").focus();
                    }, 300);
                    
                    isBadgeAddingPanelOpen = true;
                }
            }
        
            // Hides badge adding panel if it is shown.
            // When the hidding animation finishs, the ''$("#addBadgePanel").bind("transitionend [...]'
            // is called.
            function hideBadgeAdding(cancel) {
                if (isBadgeAddingPanelOpen) {
                    $("#addBadgePanel").removeClass("addBadgePanelShows");
                    
                    if (cancel) {                        
                        setTimeout(function() {
                            $("#badgePreviewPanel").hide();
                        }, 400);
                    }
                }
            }
        
            $(document).ready(function() {
                // Hides useless fields ; can't do it with a "display: none;" css 
                // property because of the "input-group" css class.          
                $("#rulePoints, #ruleBadge, #newBadgeValue, #existingBadge, #penalty").hide();
                
                // Shows Spongebob.
                setTimeout(function() {
                    $("#spongebobImg").addClass("spongebobImgMoved");
                    $("#subTitle").fadeIn("slow");
                }, 1500);
                
                // Hides badge adding panel when it successfully moved under the rule
                // manager container.
                $("#addBadgePanel").bind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd", function() {
                    if (isBadgeAddingPanelOpen && $("#addBadgePanel").offset().left >= $("#manageRulesContainer").offset().left) {
                        $("#addBadgePanel").css("visibility", "hidden");  
                        
                        $("#previewTitle").hide();
                        //$("#badgePreviewPanel").hide();
                                              
                        isBadgeAddingPanelOpen = false;
                    }
                });
                
                // Hide Spongebob when the user clicks on it.
                $("#spongebobImg").click(function() {
                    if (!isBobThrown && !$("#spongebobImg").hasClass("spongebobShy")) {
                        $("#spongebobImg").removeClass("spongebobImgMoved");
                        $("#subTitle").text("Well done, he got what he deserved!");
                        
                        // ...but Spongebob has not yet said his last word!
                        // He first shyly comes again...
                        setTimeout(function() {
                            $("#spongebobImg").addClass("spongebobShy");
                            $("#subTitle").text("Wait what?! Bob I dare you, I double dare you to come back!");
                        }, 4000);
                        setTimeout(function() {
                            $("#subTitle").text("Bob if you come back I swear you're a dead sponge!");
                        }, 8000);
                        // ...and then comes enterely, how naughty!
                        setTimeout(function() {
                            $("#spongebobImg").removeClass("spongebobShy");
                            $("#spongebobImg").addClass("spongebobImgMoved");
                            $("#subTitle").html(
                                "Well, you asked for it. " + 
                                "<button class='btn btn-danger btnthrowBob' onClick='throwBob()'>Throw it out!</button> " + 
                                "<button class='btn btnApp btnthrowBob' onClick='hideSubtitle()'>Shut up</button>");
                        }, 12000);
                    }
                });
            });
            
            // Animates Spongebob when user clicks anywhere on the window.
            $(document).click(function() {
                if (!isBobThrown) {
                    if ($("#spongebobImg").is(".spongebobImgMoved")) {
                        $("#spongebobImg").addClass("spongebobImgJump");
                        
                        setTimeout(function() {
                            $("#spongebobImg").removeClass("spongebobImgJump");
                        }, 150);
                    }
                }
            });
